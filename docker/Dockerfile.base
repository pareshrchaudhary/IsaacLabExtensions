# Copyright (c) 2022-2025, The Isaac Lab Project Developers.
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

# Nvidia Dockerfiles: https://github.com/NVIDIA-Omniverse/IsaacSim-dockerfiles
# Please check above link for license information.

# Base image
ARG ISAACSIM_BASE_IMAGE_ARG=nvcr.io/nvidia/isaac-sim
ARG ISAACSIM_VERSION_ARG=4.5.0
FROM ${ISAACSIM_BASE_IMAGE_ARG}:${ISAACSIM_VERSION_ARG} AS base

# Set default RUN shell to bash
SHELL ["/bin/bash", "-c"]

# Adds labels to the Dockerfile
LABEL version="1.1"
LABEL description="Dockerfile for building and running the Isaac Lab framework inside Isaac Sim container image."

# Arguments
# Path to Isaac Sim root folder
ARG ISAACSIM_ROOT_PATH_ARG
ENV ISAACSIM_ROOT_PATH=${ISAACSIM_ROOT_PATH_ARG}
# Path to the Isaac Lab directory
ARG ISAACLAB_PATH_ARG
ENV ISAACLAB_PATH=${ISAACLAB_PATH_ARG}
# Home dir of docker user, typically '/root'
ARG DOCKER_USER_HOME_ARG
ENV DOCKER_USER_HOME=${DOCKER_USER_HOME_ARG}
# Set Isaac Sim version environment variable
ARG ISAACSIM_VERSION_ARG
ENV ISAACSIM_VERSION=${ISAACSIM_VERSION_ARG}

# Set environment variables
ENV LANG=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive

USER root

# Install dependencies and remove cache
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libglib2.0-0 \
    ncurses-term \
    tmux \
    wget && \
    apt -y autoremove && apt clean autoclean && \
    rm -rf /var/lib/apt/lists/*

# Copy the Isaac Lab directory (files to exclude are defined in .dockerignore)
COPY IsaacLab/ ${ISAACLAB_PATH}

# Ensure the script is executable
RUN chmod +x ${ISAACLAB_PATH}/isaaclab.sh

# Set up a symbolic link between the installed Isaac Sim root folder and _isaac_sim in the Isaac Lab directory
RUN ln -sf ${ISAACSIM_ROOT_PATH} ${ISAACLAB_PATH}/_isaac_sim

# Install toml dependency
RUN ${ISAACLAB_PATH}/isaaclab.sh -p -m pip install toml

# Install apt dependencies for extensions that declare them in their extension.toml
RUN --mount=type=cache,target=/var/cache/apt \
    ${ISAACLAB_PATH}/isaaclab.sh -p ${ISAACLAB_PATH}/tools/install_deps.py apt ${ISAACLAB_PATH}/source && \
    apt -y autoremove && apt clean autoclean && \
    rm -rf /var/lib/apt/lists/*

# ==============================================================================
# VOLUME DIRECTORY CREATION FOR BIND MOUNTS
# ==============================================================================
# These directories are created inside the container to ensure proper bind mount targets exist.
# They correspond to the bind mounts defined in docker-compose.yaml.
# 
# For detailed information about the volume strategy, see README.md in this directory.
#
# WHY CREATE THESE DIRECTORIES:
# 1. Docker bind mounts require the target directory to exist in the container
# 2. If the directory doesn't exist, Docker creates it as root, causing permission issues
# 3. Creating them explicitly ensures proper ownership and permissions
# 4. These directories will be "overlaid" by bind mounts at runtime

# Create Isaac Sim related cache and log directories
RUN mkdir -p ${ISAACSIM_ROOT_PATH}/kit/cache && \
    mkdir -p ${ISAACSIM_ROOT_PATH}/kit/logs/Kit/Isaac-Sim

# Create user home cache directories for various NVIDIA/Omniverse components
RUN mkdir -p ${DOCKER_USER_HOME}/cache/ov && \
    mkdir -p ${DOCKER_USER_HOME}/cache/pip && \
    mkdir -p ${DOCKER_USER_HOME}/cache/nvidia/GLCache && \
    mkdir -p ${DOCKER_USER_HOME}/cache/compute && \
    mkdir -p ${DOCKER_USER_HOME}/logs/omniverse && \
    mkdir -p ${DOCKER_USER_HOME}/data/omniverse && \
    mkdir -p ${DOCKER_USER_HOME}/docs
    # mkdir -p ${ISAACLAB_PATH}/docs/_build

# Create workspace directory for adversarial_manipulation bind mount
RUN mkdir -p /workspace/adversarial_manipulation

# ==============================================================================
# SINGULARITY COMPATIBILITY
# ==============================================================================
# The following sections are for Singularity container compatibility.
# Singularity has different volume mounting behavior than Docker.

# Create additional directories that will be bound when using Singularity
# Note: These overlap with the bind mount directories above, but are needed for Singularity
RUN mkdir -p ${ISAACSIM_ROOT_PATH}/kit/cache && \
    mkdir -p ${DOCKER_USER_HOME}/cache/ov && \
    mkdir -p ${DOCKER_USER_HOME}/cache/pip && \
    mkdir -p ${DOCKER_USER_HOME}/cache/nvidia/GLCache && \
    mkdir -p ${DOCKER_USER_HOME}/cache/compute && \
    mkdir -p ${DOCKER_USER_HOME}/logs/omniverse && \
    mkdir -p ${DOCKER_USER_HOME}/data/omniverse && \
    mkdir -p ${DOCKER_USER_HOME}/docs
    # mkdir -p ${ISAACLAB_PATH}/docs/_build && \
    # mkdir -p ${DOCKER_USER_HOME}/docs/_build

# Create NVIDIA binary placeholders for Singularity
# Singularity needs these files to exist for proper GPU support
RUN touch /bin/nvidia-smi && \
    touch /bin/nvidia-debugdump && \
    touch /bin/nvidia-persistenced && \
    touch /bin/nvidia-cuda-mps-control && \
    touch /bin/nvidia-cuda-mps-server && \
    touch /etc/localtime && \
    mkdir -p /var/run/nvidia-persistenced && \
    touch /var/run/nvidia-persistenced/socket

# installing Isaac Lab dependencies
# use pip caching to avoid reinstalling large packages
RUN --mount=type=cache,target=${DOCKER_USER_HOME}/.cache/pip \
    ${ISAACLAB_PATH}/isaaclab.sh --install

# Install wandb for experiment tracking
RUN --mount=type=cache,target=${DOCKER_USER_HOME}/.cache/pip \
    ${ISAACLAB_PATH}/isaaclab.sh -p -m pip install wandb

# Uninstall skrl package if it exists
RUN ${ISAACLAB_PATH}/isaaclab.sh -p -m pip uninstall -y skrl || true

# Copy skrl library for installation
COPY libraries/skrl ${ISAACLAB_PATH}/libraries/skrl

# Install skrl in development mode with torch extras
RUN cd ${ISAACLAB_PATH}/libraries/skrl && \
    ${ISAACLAB_PATH}/isaaclab.sh -p -m pip install -e '.[torch]'

# Copy IsaacLabExtensions for installation
COPY IsaacLabExtensions /workspace/isaaclab_extensions

# Install all IsaacLabExtensions (IsaacLabExtensions/source) in development mode
RUN cd /workspace/isaaclab_extensions && \
    for dir in source/*/; do \
        if [ -f "$dir/setup.py" ]; then \
            echo "Installing extension: $dir" && \
            ${ISAACLAB_PATH}/isaaclab.sh -p -m pip install -e "$dir"; \
        fi; \
    done

# aliasing isaaclab.sh and python for convenience
RUN echo "export ISAACLAB_PATH=${ISAACLAB_PATH}" >> ${HOME}/.bashrc && \
    echo "alias isaaclab=${ISAACLAB_PATH}/isaaclab.sh" >> ${HOME}/.bashrc && \
    echo "alias python=${ISAACLAB_PATH}/_isaac_sim/python.sh" >> ${HOME}/.bashrc && \
    echo "alias python3=${ISAACLAB_PATH}/_isaac_sim/python.sh" >> ${HOME}/.bashrc && \
    echo "alias pip='${ISAACLAB_PATH}/_isaac_sim/python.sh -m pip'" >> ${HOME}/.bashrc && \
    echo "alias pip3='${ISAACLAB_PATH}/_isaac_sim/python.sh -m pip'" >> ${HOME}/.bashrc && \
    echo "alias tensorboard='${ISAACLAB_PATH}/_isaac_sim/python.sh ${ISAACLAB_PATH}/_isaac_sim/tensorboard'" >> ${HOME}/.bashrc && \
    echo "export TZ=$(date +%Z)" >> ${HOME}/.bashrc && \
    echo "shopt -s histappend" >> /root/.bashrc && \
    echo "PROMPT_COMMAND='history -a'" >> /root/.bashrc

# ==============================================================================
# ISAAC SIM ASSET CONFIGURATION
# ==============================================================================
# Configure Isaac Sim to use local assets instead of downloading from the cloud
# This modifies the isaacsim.exp.base.kit file to set the asset root path
# to the bind-mounted local assets directory

# Create the asset configuration section in isaacsim.exp.base.kit
RUN echo "" >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "[settings]" >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "persistent.isaac.asset_root.default = \"/isaacsim_assets/Assets/Isaac/4.5\"" >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "exts.\"isaacsim.asset.browser\".folders = [" >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "    \"/isaacsim_assets/Assets/Isaac/4.5/Isaac/Robots\"," >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "    \"/isaacsim_assets/Assets/Isaac/4.5/Isaac/People\"," >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "    \"/isaacsim_assets/Assets/Isaac/4.5/Isaac/IsaacLab\"," >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "    \"/isaacsim_assets/Assets/Isaac/4.5/Isaac/Props\"," >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "    \"/isaacsim_assets/Assets/Isaac/4.5/Isaac/Environments\"," >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "    \"/isaacsim_assets/Assets/Isaac/4.5/Isaac/Materials\"," >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "    \"/isaacsim_assets/Assets/Isaac/4.5/Isaac/Samples\"," >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "    \"/isaacsim_assets/Assets/Isaac/4.5/Isaac/Sensors\"," >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit && \
    echo "]" >> ${ISAACSIM_ROOT_PATH}/kit/isaacsim.exp.base.kit

# ==============================================================================
# ISAAC SIM COMMAND-LINE FLAG CONFIGURATION
# ==============================================================================
# Configure Isaac Sim launch scripts to use the local assets flag by default
# This provides an additional way to set the asset root via command-line
# The flag: --/persistent/isaac/asset_root/default="/isaacsim_assets/Assets/Isaac/4.5"

# Create a wrapper script that adds the asset root flag to Isaac Sim launches
RUN echo '#!/bin/bash' > ${ISAACSIM_ROOT_PATH}/isaac-sim-with-assets.sh && \
    echo '# Isaac Sim launcher with local assets configured' >> ${ISAACSIM_ROOT_PATH}/isaac-sim-with-assets.sh && \
    echo 'exec ${ISAACSIM_ROOT_PATH}/isaac-sim.sh --/persistent/isaac/asset_root/default="/isaacsim_assets/Assets/Isaac/4.5" "$@"' >> ${ISAACSIM_ROOT_PATH}/isaac-sim-with-assets.sh && \
    chmod +x ${ISAACSIM_ROOT_PATH}/isaac-sim-with-assets.sh

# Also create a Python wrapper for headless usage
RUN echo '#!/bin/bash' > ${ISAACSIM_ROOT_PATH}/python-with-assets.sh && \
    echo '# Python launcher with local assets configured' >> ${ISAACSIM_ROOT_PATH}/python-with-assets.sh && \
    echo 'exec ${ISAACSIM_ROOT_PATH}/python.sh --/persistent/isaac/asset_root/default="/isaacsim_assets/Assets/Isaac/4.5" "$@"' >> ${ISAACSIM_ROOT_PATH}/python-with-assets.sh && \
    chmod +x ${ISAACSIM_ROOT_PATH}/python-with-assets.sh

# Add aliases for the asset-enabled versions
RUN echo "alias isaac-sim-assets=${ISAACSIM_ROOT_PATH}/isaac-sim-with-assets.sh" >> ${HOME}/.bashrc && \
    echo "alias python-assets=${ISAACSIM_ROOT_PATH}/python-with-assets.sh" >> ${HOME}/.bashrc

# make working directory as the project folder
# this is the default directory when the container is run
WORKDIR /workspace/isaaclab_extensions
