# Here we set the parts that would
# be re-used between services to an
# extension field
# https://docs.docker.com/compose/compose-file/compose-file-v3/#extension-fields

# VOLUME STRATEGY:
# Isaac Lab uses bind mounts to store all cache, logs, and data in a local 'docker_volumes' directory.
# For detailed information about the volume strategy, see README.md in this directory.

x-default-isaac-lab-volumes: &default-isaac-lab-volumes
  # ISAAC SIM CACHE AND DATA VOLUMES:
  # These volumes follow NVIDIA's recommendations for persistent storage
  # https://docs.omniverse.nvidia.com/app_isaacsim/app_isaacsim/install_faq.html#save-isaac-sim-configs-on-local-disk
  
  # Isaac Sim kit cache (shader cache, configs, etc.)
  # Host: ../../docker_volumes/kit/cache → Container: /isaac-sim/kit/cache
  - type: bind
    source: ../../docker_volumes/kit/cache
    target: ${DOCKER_ISAACSIM_ROOT_PATH}/kit/cache
  
  # OMNIVERSE AND NVIDIA CACHE VOLUMES:
  # These store Omniverse client cache and NVIDIA graphics/compute cache
  
  # Omniverse client cache (materials, assets, etc.)
  # Host: ../../docker_volumes/cache/ov → Container: /root/cache/ov
  - type: bind
    source: ../../docker_volumes/cache/ov
    target: ${DOCKER_USER_HOME}/cache/ov
  
  # Python pip package cache (speeds up package installs)
  # Host: ../../docker_volumes/cache/pip → Container: /root/cache/pip
  - type: bind
    source: ../../docker_volumes/cache/pip
    target: ${DOCKER_USER_HOME}/cache/pip
  
  # NVIDIA OpenGL shader cache (improves rendering performance)
  # Host: ../../docker_volumes/cache/nvidia/GLCache → Container: /root/cache/nvidia/GLCache
  - type: bind
    source: ../../docker_volumes/cache/nvidia/GLCache
    target: ${DOCKER_USER_HOME}/cache/nvidia/GLCache
  
  # NVIDIA CUDA compute cache (speeds up GPU computations)
  # Host: ../../docker_volumes/cache/compute → Container: /root/cache/compute
  - type: bind
    source: ../../docker_volumes/cache/compute
    target: ${DOCKER_USER_HOME}/cache/compute
  
  # LOGGING AND DATA VOLUMES:
  
  # Omniverse application logs
  # Host: ../../docker_volumes/logs/omniverse → Container: /root/logs/omniverse
  - type: bind
    source: ../../docker_volumes/logs/omniverse
    target: ${DOCKER_USER_HOME}/logs/omniverse
  
  # Isaac Sim kit application logs (detailed debugging info)
  # Host: ../../docker_volumes/kit/logs/Kit/Isaac-Sim → Container: /isaac-sim/kit/logs/Kit/Isaac-Sim
  - type: bind
    source: ../../docker_volumes/kit/logs/Kit/Isaac-Sim
    target: ${DOCKER_ISAACSIM_ROOT_PATH}/kit/logs/Kit/Isaac-Sim
  
  # Omniverse user data (scenes, materials, custom assets)
  # Host: ../../docker_volumes/data/omniverse → Container: /root/data/omniverse
  - type: bind
    source: ../../docker_volumes/data/omniverse
    target: ${DOCKER_USER_HOME}/data/omniverse
  
  # User documentation and configuration files
  # Host: ../../docker_volumes/docs → Container: /root/docs
  - type: bind
    source: ../../docker_volumes/docs
    target: ${DOCKER_USER_HOME}/docs
  
  # ISAAC LAB VOLUMES:
  # These bind mounts allow live editing of Isaac Lab code
  # Changes made on the host are immediately reflected in the container
  - type: bind
    source: ../../IsaacLab/source
    target: ${DOCKER_ISAACLAB_PATH}/source
  - type: bind
    source: ../../IsaacLab/scripts
    target: ${DOCKER_ISAACLAB_PATH}/scripts
  - type: bind
    source: ../../IsaacLab/docs
    target: ${DOCKER_ISAACLAB_PATH}/docs
  - type: bind
    source: ../../IsaacLab/tools
    target: ${DOCKER_ISAACLAB_PATH}/tools
  - type: bind
    source: ../../libraries
    target: ${DOCKER_ISAACLAB_PATH}/libraries
  
  # ISAAC LAB EXTENSIONS VOLUMES:
  # These bind mounts allow live editing of Isaac Lab Extensions code
  # Changes made on the host are immediately reflected in the container
  - type: bind
    source: ../../IsaacLabExtensions/source
    target: /workspace/isaaclab_extensions/source
  - type: bind
    source: ../../IsaacLabExtensions/scripts
    target: /workspace/isaaclab_extensions/scripts
  
  # ISAAC LAB OUTPUT AND BUILD VOLUMES:
  # Training logs, experiment outputs, saved models
  - type: bind
    source: ../logs
    target: ${DOCKER_ISAACLAB_PATH}/logs
  - type: bind
    source: ../outputs
    target: ${DOCKER_ISAACLAB_PATH}/outputs
  - type: bind
    source: ../data_storage
    target: ${DOCKER_ISAACLAB_PATH}/data_storage
  
  # Built documentation artifacts (prevents root-owned files on host)
  # Host: ../../docker_volumes/docs_build → Container: /workspace/IsaacLab/docs/_build
  # - type: bind
  #   source: ../../docker_volumes/docs_build
  #   target: ${DOCKER_ISAACLAB_PATH}/docs/_build
  
  # SHELL HISTORY:
  # Persistent bash history for convenience during development
  - type: bind
    source: ../../docker_volumes/shell_history/.bash_history
    target: ${DOCKER_USER_HOME}/.bash_history

  # Bind mount for local Isaac Sim assets
  - type: bind
    source: ../../docker_volumes/assets/Assets/Isaac/4.5
    target: /isaacsim_assets/Assets/Isaac/4.5

  # Bind mount for adversarial_manipulation
  - type: bind
    source: ../
    target: /workspace/adversarial_manipulation

x-default-isaac-lab-environment: &default-isaac-lab-environment
  - ISAACSIM_PATH=${DOCKER_ISAACLAB_PATH}/_isaac_sim
  - OMNI_KIT_ALLOW_ROOT=1
  - ACCEPT_EULA=Y
  - PRIVACY_CONSENT=Y

x-default-isaac-lab-deploy: &default-isaac-lab-deploy
  resources:
    reservations:
      devices:
        - driver: nvidia
          count: all
          capabilities: [ gpu ]

services:
  # This service is the base Isaac Lab image
  isaac-lab-base:
    profiles: [ "base" ]
    env_file: .env.base
    build:
      context: ../../
      dockerfile: IsaacLabExtensions/docker/Dockerfile.base
      args:
        - ISAACSIM_BASE_IMAGE_ARG=${ISAACSIM_BASE_IMAGE}
        - ISAACSIM_VERSION_ARG=${ISAACSIM_VERSION}
        - ISAACSIM_ROOT_PATH_ARG=${DOCKER_ISAACSIM_ROOT_PATH}
        - ISAACLAB_PATH_ARG=${DOCKER_ISAACLAB_PATH}
        - DOCKER_USER_HOME_ARG=${DOCKER_USER_HOME}
    image: isaac-lab-base
    container_name: isaac-lab-base
    environment:
      - ISAACSIM_PATH=${DOCKER_ISAACLAB_PATH}/_isaac_sim
      - OMNI_KIT_ALLOW_ROOT=1
      - ACCEPT_EULA=Y
      - PRIVACY_CONSENT=Y
      # Use local assets if available
      - ISAACSIM_ASSET_ROOT=/isaacsim_assets/Assets/Isaac/4.5
    volumes: *default-isaac-lab-volumes
    network_mode: host
    deploy: *default-isaac-lab-deploy
    # This is the entrypoint for the container
    entrypoint: bash
    stdin_open: true
    tty: true

  # This service adds a ROS2 Humble
  # installation on top of the base image
  isaac-lab-ros2:
    profiles: [ "ros2" ]
    env_file:
      - .env.base
      - .env.ros2
    build:
      context: ../../
      dockerfile: IsaacLabExtensions/docker/Dockerfile.ros2
      args:
        # ROS2_APT_PACKAGE will default to NONE. This is to
        # avoid a warning message when building only the base profile
        # with the .env.base file
        - ROS2_APT_PACKAGE=${ROS2_APT_PACKAGE:-NONE}
    image: isaac-lab-ros2
    container_name: isaac-lab-ros2
    environment: *default-isaac-lab-environment
    volumes: *default-isaac-lab-volumes
    network_mode: host
    deploy: *default-isaac-lab-deploy
    # This is the entrypoint for the container
    entrypoint: bash
    stdin_open: true
    tty: true
